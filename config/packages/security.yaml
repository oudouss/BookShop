security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_books:
            pattern:   ^/api/books
            methods:    [GET]
            security: false
            stateless: true

        api_categories:
            pattern:   ^/api/categories
            methods:    [GET]
            security: false
            stateless: true

        api_register:
            pattern:   ^/api/register
            methods:    [POST]
            security: false
            stateless: true
        
        api_login:
            pattern: ^/api/login$
            provider: app_user_provider
            stateless: true
            json_login:
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        
        api_profile:
            pattern:   ^/api/profile
            provider: app_user_provider
            methods:    [GET]
            stateless: true
            jwt: ~     
  
        api_adress:
            pattern:   ^/api/user-addresses
            provider: app_user_provider
            methods:    [GET, POST, PUT, PATCH, DELETE]
            stateless: true
            jwt: ~   

        api_payment:
            pattern:   ^/api/user-payments
            provider: app_user_provider
            methods:    [GET, POST, PUT, PATCH, DELETE]
            stateless: true
            jwt: ~   

        api_orders:
            pattern:   ^/api/orders
            provider: app_user_provider
            methods:    [GET, POST, PUT, PATCH, DELETE]
            stateless: true
            jwt: ~   

        api_order_items:
            pattern:   ^/api/order-items
            provider: app_user_provider
            methods:    [GET, POST, PUT, PATCH, DELETE]
            stateless: true
            jwt: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/books,             roles: PUBLIC_ACCESS,          methods: [GET] }
         - { path: ^/api/categories,        roles: PUBLIC_ACCESS,          methods: [GET] }
         - { path: ^/api/register,          roles: PUBLIC_ACCESS,          methods: [POST] }
         - { path: ^/api/login,             roles: PUBLIC_ACCESS,          methods: [POST] }
         - { path: ^/api/profile,           roles: IS_AUTHENTICATED_FULLY, methods: [GET] }
         - { path: ^/api/user-addresses,    roles: IS_AUTHENTICATED_FULLY, methods: [GET, POST, PUT, PATCH, DELETE] }
         - { path: ^/api/user-payments,     roles: IS_AUTHENTICATED_FULLY, methods: [GET, POST, PUT, PATCH, DELETE] }
         - { path: ^/api/orders,            roles: IS_AUTHENTICATED_FULLY, methods: [GET, POST, PUT, PATCH, DELETE] }
         - { path: ^/api/order-items,       roles: IS_AUTHENTICATED_FULLY, methods: [GET, POST, PUT, PATCH, DELETE] }

        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
